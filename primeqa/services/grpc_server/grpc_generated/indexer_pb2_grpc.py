# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import indexer_pb2 as indexer__pb2


class IndexerStub(object):
    """*
    Service to build index
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetIndexers = channel.unary_unary(
                '/index.Indexer/GetIndexers',
                request_serializer=indexer__pb2.GetIndexersRequest.SerializeToString,
                response_deserializer=indexer__pb2.GetIndexersResponse.FromString,
                )
        self.GenerateIndex = channel.stream_unary(
                '/index.Indexer/GenerateIndex',
                request_serializer=indexer__pb2.GenerateIndexRequest.SerializeToString,
                response_deserializer=indexer__pb2.GenerateIndexResponse.FromString,
                )
        self.GetIndexStatus = channel.unary_unary(
                '/index.Indexer/GetIndexStatus',
                request_serializer=indexer__pb2.GetIndexStatusRequest.SerializeToString,
                response_deserializer=indexer__pb2.IndexStatusResponse.FromString,
                )
        self.GetIndexes = channel.unary_unary(
                '/index.Indexer/GetIndexes',
                request_serializer=indexer__pb2.GetIndexesRequest.SerializeToString,
                response_deserializer=indexer__pb2.GetIndexesResponse.FromString,
                )


class IndexerServicer(object):
    """*
    Service to build index
    """

    def GetIndexers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateIndex(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIndexStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIndexes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IndexerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetIndexers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIndexers,
                    request_deserializer=indexer__pb2.GetIndexersRequest.FromString,
                    response_serializer=indexer__pb2.GetIndexersResponse.SerializeToString,
            ),
            'GenerateIndex': grpc.stream_unary_rpc_method_handler(
                    servicer.GenerateIndex,
                    request_deserializer=indexer__pb2.GenerateIndexRequest.FromString,
                    response_serializer=indexer__pb2.GenerateIndexResponse.SerializeToString,
            ),
            'GetIndexStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIndexStatus,
                    request_deserializer=indexer__pb2.GetIndexStatusRequest.FromString,
                    response_serializer=indexer__pb2.IndexStatusResponse.SerializeToString,
            ),
            'GetIndexes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIndexes,
                    request_deserializer=indexer__pb2.GetIndexesRequest.FromString,
                    response_serializer=indexer__pb2.GetIndexesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'index.Indexer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Indexer(object):
    """*
    Service to build index
    """

    @staticmethod
    def GetIndexers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/index.Indexer/GetIndexers',
            indexer__pb2.GetIndexersRequest.SerializeToString,
            indexer__pb2.GetIndexersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateIndex(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/index.Indexer/GenerateIndex',
            indexer__pb2.GenerateIndexRequest.SerializeToString,
            indexer__pb2.GenerateIndexResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetIndexStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/index.Indexer/GetIndexStatus',
            indexer__pb2.GetIndexStatusRequest.SerializeToString,
            indexer__pb2.IndexStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetIndexes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/index.Indexer/GetIndexes',
            indexer__pb2.GetIndexesRequest.SerializeToString,
            indexer__pb2.GetIndexesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
