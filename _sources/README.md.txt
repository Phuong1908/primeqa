# PrimeQA Documentation

PrimeQA uses Sphinx for documentation.  Before continuing make sure you have installed PrimeQA
with `docs` extras.  For example, from the top level of the project:

```shell
pip install .[docs]
```

The documentation can then be built with:

```shell
cd docs
make html -e SPHINXOPTS='--keep-going --no-color -w "{log_file}"'   
```

This will generate the documentation in HTML.

## Docker

The documentation can also be built and served from a Docker container.

```shell
VERSION=$(cat VERSION)
cd docs

# build image
./buildDocker.sh

# run container
docker run -p 80:80 --rm -d --name primeqa-docs primeqa-docs:${VERSION}
```

## Deploying a Sphinx project:
* ([Sphinx doc](https://www.sphinx-doc.org/en/master/tutorial/deploying.html))      
* [GitHub Pages](https://pages.github.com/): GitHub Pages is a simple static web hosting tightly integrated with [GitHub](https://github.com/): static HTML is served from one of the branches of a project, and usually sources are stored in another branch so that the output can be updated every time the sources change (for example using [GitHub Actions](https://github.com/features/actions)). It is free to use and supports custom domains.

<img src="_static/img/github-actions.png" width="500" class="center">

## Publishing your documentation sources on GitHub Pages:           
* Sign up for a GitHub account.
* Create a new repository.
* Open the “Upload files” page of your new repository.
* Select the files on your operating system file browser (the makefiles under the docs directory, and everything under docs/source) and drag them to the GitHub interface to upload them all.
* Click on the Commit changes button.

*Note: Make sure you don’t upload the docs/build directory, as it contains the output generated by Sphinx and it will change every time you change the sources, complicating your workflow.*

* After that, you will need an automated process that performs the make html step every time the sources change. That can be achieved using [GitHub Actions](https://github.com/features/actions).
* After you have published your sources on GitHub, create a file named `.github/workflows/sphinx-doc-build.yml` in your repository with the following contents:       
```
name: SphinxDoc Build

on:
  push:
    branches: [ "main"]
  pull_request:
    branches: [ "main"]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: 3.9
    - name: Install dependencies (docs/requirements.txt)
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        python -m pip install 'torch~=1.11.0' --extra-index-url https://download.pytorch.org/whl/cu113
        if [ -f docs/requirements.txt ]; then pip install -r docs/requirements.txt; fi
    - name: SphinxDoc Make HTML
      run: |
        cd docs
        make html -e SPHINXOPTS='--keep-going --no-color -w "log_file"'   
    - name: Upload artifacts (docs/log_file)
      uses: actions/upload-artifact@v3
      with:
        name: html-docs-log_file
        path: docs/log_file
    - name: Deploy Documentation from main (gh-pages branch)
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: docs/_build/html
        commit_message: -automatic commit- Sphinx Doc Build
```

* This contains a GitHub Actions workflow with a single job of four steps:
    1. Checkout the code.
    2. Build the HTML documentation using Sphinx.
    3. Attach the HTML output the artifacts to the GitHub Actions job, for easier inspection.
    4. If the change happens on the default branch, take the contents of docs/build/html and push it to the gh-pages branch.

* Next, you need to specify the dependencies for the make html step to be successful. For that, create a file [docs/requirements.txt](https://github.com/primeqa/primeqa/tree/main/docs/requirements.txt) 

* And finally, you are ready to enable [GitHub Pages on your repository](https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site). For that, go to Settings, then Pages on the left sidebar, select the gh-pages branch in the “Source” dropdown menu, and click Save. After a few minutes, you should be able to see your HTML at the designated URL.        

### New package added to PrimeQA    
- go to `/docs/api` and create a new folder with same package name  
- add `index.md` file and copy there the README text (keep same structure used into others packages)  
- modify `/docs/api/index.rst` to add new package link access 
- modify `/docs/_templates_/custom-left-section-api-pkg.html` to add new package link access 
- modify `.gitignore` to avoid commit _autosummary generated files for the new package   

